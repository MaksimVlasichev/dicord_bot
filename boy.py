import asyncio
import disnake
import sys
from disnake.ext import commands
import os, sqlite3
from obr import rand
import pars
from accList import AccList, DelAcc, ResetAcc, SearchList
from typing import Optional
import disnake_paginator
import emoji
import string
from ToDataBase import Info
import datetime
import time 
from enum import Enum
from Party import CreateParty
from NewPars import GenStat, GenBRMap, GenRankedMap, GenltmMap, GenReplic, GenShop
import typing
from rand_legens_and_gun import rand_gun, rand_leg

TOKEN =''

bot = commands.InteractionBot()

PartyCreator = {}

async def UStats(userName, platform):
    try:
        info = GenStat(userName, platform)
    except Exception:
        embed = disnake.Embed(title = "–¢–∞–∫–æ–π ea –Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∏–∫–Ω–µ–π–º –≤ —Å—Ç–∏–º–µ, –∞ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∏–∫–æ–º –≤ ea, –ª–∏–±–æ –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏", color=0x0091ff)
        return embed 
    else:
        lvl = info[0]
        rank = info[1]
        LP = info[2]
        RankImg = info[3]
        embed = disnake.Embed(title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + userName + ":", color=0x0091ff)
        embed.set_thumbnail(url=RankImg)
        embed.add_field(name = "–£—Ä–æ–≤–µ–Ω—å " + str(lvl), value="", inline=False)
        embed.add_field(name = "–†–∞–Ω–≥: " + rank, value="LP: " + str(LP), inline=False)
        return embed
    
async def ButtStat(message: disnake.ApplicationCommandInteraction):
    PlayerInfo = Info(message.author.id)
    emojiArr = ["üá≤", "üáπ", "üáπ"]
    
    if len(PlayerInfo) < 1:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å")
        return False
    for i in range(len(PlayerInfo)):
        PlayerInfo[i] = disnake.ui.Button(label=PlayerInfo[i], style=disnake.ButtonStyle.blurple, emoji=emojiArr[i], custom_id=str(i))
    return PlayerInfo

@bot.event #–∏–≤–µ–Ω—Ç –≤–∫–ª—é—á–µ–Ω–∏—è
async def on_ready():
    print("–ë—É–ø")
    # infoEnt = rand()
    # character = infoEnt.split("\n")[0]
    # url = infoEnt.split("\n")[1]
    # citata = infoEnt.split("\n")[2]
    # print(character, url, citata)
    # embed=disnake.Embed(title ="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É &help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", description = (citata + "\n¬©"+ character), color=0x0091ff)
    # embed.set_thumbnail(url= url)
    # await bot.get_channel(496234920188968960).send(embed = embed) #–≤ —Å–∫–æ–±–æ—á–∫–∞—Ö –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞
    await bot.change_presence(activity=disnake.Game(name="/help")) #—Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    
# @bot.command(pass_context=True)
# @bot.event #–ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
# async def on_member_join(member):
#     await bot.get_channel(450717218804596771).send(f" –ö—É {member.mention} –ø—Ä–∏–∑–µ–º–ª—è–µ—Ç—Å—è, –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—å –Ω–æ–≤—ã–º —á–µ–º–ø–∏–æ–Ω–æ–º –∏–≥—Ä –ê–ø–µ–∫—Å–∞:\n")
#     embed=disnake.Embed(title = rand())
#     await bot.get_channel(450717218804596771).send(embed=embed)

@bot.slash_command(description="–ü–æ–º–æ—â—å") #—á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def help(inter):
    embed=disnake.Embed(title = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n ", description = "–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥\n", color=0x0091ff)
    embed.set_thumbnail(url="https://i.pinimg.com/564x/eb/fc/09/ebfc09c9f0b39af612956cfb734d27e2.jpg")
    embed.add_field(name = "<:radio_button:1036676020545269812> /map_in_{ranked/pubs/ltm}", value ="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –≤ –ö–ë –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ/–ø–∞–±–ª–∏–∫–∞—Ö –∏–ª–∏ —Å–º–µ–Ω—è–µ–º—ã—Ö —Ä–µ–∂–∏–º–∞—Ö", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /replicator", value ="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–ø–ª–∏–∫–∞—Ç–æ—Ä–µ", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /player_stat {OriginID}", value ="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /create_party", value ="–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Ä—è–¥ –≤–¥–≤–æ–µ–º –∏–ª–∏ –≤—Ç—Ä–æ–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ë–î –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /add_acc {OriginID}", value ="–î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π/—Ç–≤–∏–Ω–∫ –∞–∫–∫–∞—É–Ω—Ç –≤–ø–∏—Å–∞–≤ –∞–π–¥–∏ –≤ Origin (–ï—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –º–µ–π–Ω –∞–∫–∫, –∞ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º 1 –∏ 2 —Ç–≤–∏–Ω–∫)", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /del_acc {main/twink} {OriginID}", value ="–£–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π/—Ç–≤–∏–Ω–∫ –∞–∫–∫–∞—É–Ω—Ç –≤–ø–∏—Å–∞–≤ –∞–π–¥–∏ –≤ Origin", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /reset_all_acc {member}", value ="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /stat_accs", value ="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î)", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /rand_leg_and_guna", value ="–°–ª—É—á–∞–π–Ω—ã–π –≥–µ—Ä–æ–π –∏ –≥–∞–Ω—ã", inline = False)
    embed.add_field(name = "<:radio_button:1036676020545269812> /shop", value ="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö", inline = False)
    await inter.response.send_message(embed=embed, ephemeral=True)

@bot.listen("on_button_click")
async def Ustats_listener(inter: disnake.MessageInteraction):
    UStat = None
    
    await inter.response.defer()
    if inter.component.custom_id not in ["mainplus", "tw1plus", "tw2plus", "link", "del2pl", "del3pl", "delparty"]:
        UStat = await UStats(inter.component.label, platform="PC")
    
    elif inter.component.custom_id in ["mainplus", "tw1plus", "tw2plus", "link", "del2pl", "del3pl", "delparty"]:
        tempembed = inter.message.embeds[0]
        if inter.component.custom_id in ["del2pl", "del3pl", "delparty"] and str(inter.author.id) == tempembed.fields[0].value.split('@')[1].replace(">", ""):
            if inter.component.custom_id == "del2pl":
                if len(tempembed.fields) == 3:
                    tempembed.set_field_at(index=1, name="", value=tempembed.fields[2].value.replace("3.", "2."), inline=False)
                    tempembed.set_field_at(index=2, name="", value="3.", inline=False)
                    UStat = tempembed
                
                else:
                    tempembed.set_field_at(index=1, name="", value="2.", inline=False)
                    UStat = tempembed

            elif inter.component.custom_id == "del3pl":
                tempembed.set_field_at(index=2, name="", value="3.", inline=False)
                UStat = tempembed

            elif inter.component.custom_id == "delparty":
                await inter.edit_original_response(components=[])
                await inter.message.delete()
                return
        
        elif inter.component.custom_id in ["mainplus", "tw1plus", "tw2plus", "link"]:
            global PartyCreator
            mes = ""
            url = ""
            try:
                    url = PartyCreator[inter.message.id].voice.channel.id
            except Exception:
                mes = "—Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –≤ –≤–æ–π—Å–µ"
            else:
                mes = await inter.bot.get_channel(url).create_invite()
            for i in range(len(tempembed.fields)):
                
                if len(tempembed.fields[i].value) > 3 and str(inter.author.id) in tempembed.fields[i].value.split(" ")[1]:
                    if inter.component.custom_id == "link":
                        
                        await inter.send(mes, ephemeral=True)
                        break
                    else:
                        break
                elif len(tempembed.fields[i].value) > 3:
                    pass
    
                else:
                    filadelfia = os.getcwd()
                    accs = open(filadelfia + "\\accounts.txt", 'r')
                    List = accs.readlines()
                    accs.close()
                    SeaList = SearchList(List, inter.author.id)
                    
                    plat= "PC"
                    if len(str(SeaList)) > 5:
                        tempembed.set_field_at(index=i, name="", value=tempembed.fields[i].value + f" {inter.author.mention}", inline=False)
                        break
                    
                    elif inter.component.custom_id == "mainplus":
                        if len(List[SeaList].split(" "))>=2:
                            username = List[SeaList].split(" ")[1]
                            
                            tempembed.set_field_at(index=i, name="", value=tempembed.fields[i].value + f" {inter.author.mention} {username}  LP: {GenStat(nickname=username, platform=plat)[2]}", inline=False)
                            break
                    
                    elif inter.component.custom_id == "tw1plus":
                        if len(List[SeaList].split(" "))>=3:
                            username = List[SeaList].split(" ")[2]
                            tempembed.set_field_at(index=i, name="", value=tempembed.fields[i].value + f" {inter.author.mention} {username}  LP: {GenStat(nickname=username, platform=plat)[2]}", inline=False)
                            break
                    
                    elif inter.component.custom_id == "tw2plus":
                        if len(List[SeaList].split(" "))==4:
                            username = List[SeaList].split(" ")[3].replace("\n", "")
                            tempembed.set_field_at(index=i, name="", value=tempembed.fields[i].value + f" {inter.author.mention} {username}  LP:  {GenStat(nickname=username, platform=plat)[2]}", inline=False)
                            break
                    
                    # elif inter.component.custom_id == "link":
                    #     pass
                    
        UStat = tempembed
        
        # print(url)
        

    else:
        return
    await inter.edit_original_message(embed=UStat)
    
@bot.slash_command(description="C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
async def player_stat(inter: disnake.ApplicationCommandInteraction, originid: str, platform: typing.Literal["PC","PS4", "X1"]):
    OtherStat = await UStats(originid, platform)
    await inter.response.send_message(embed = OtherStat, content = "")

@bot.slash_command(description="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ö)")
async def stat_accs(inter: disnake.ApplicationCommandInteraction):
    arrButt = await ButtStat(inter)
    await inter.response.send_message(components=arrButt, ephemeral=True)

@bot.slash_command(description="–î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π/—Ç–≤–∏–Ω–∫ Origin —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ö")
async def add_acc(inter, originid: str):
    YayOrError = AccList(inter.author.id, originid)
    await inter.response.send_message(YayOrError, ephemeral=True)

@bot.slash_command(description="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
async def del_acc(inter, originid: str):
    deleteAcc = DelAcc(inter.author.id, originid)
    await inter.response.send_message(deleteAcc, ephemeral=True)

@bot.slash_command(description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–≥—Ä–æ–∫–∞")
async def reset_all_accs(inter: disnake.ApplicationCommandInteraction, member: disnake.Member):
    if inter.author.guild_permissions.view_audit_log == True:
        ResAcc = ResetAcc(str(member.id))
        await inter.response.send_message(ResAcc, ephemeral=True)
    else: await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º", ephemeral=True)

@bot.slash_command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—ã –≤ –ø–∞–±–ª–∏–∫–∞—Ö")
async def map_in_pubs(inter):
    # Zdyn = await inter.response.send_message("https://tenor.com/view/wait-star-wars-watching-looking-staring-gif-10097895")
    MapInPubs = GenBRMap()
    time = datetime.datetime.now() + datetime.timedelta(hours=int(MapInPubs[3][0]), minutes=int(MapInPubs[3][1]), seconds=int(MapInPubs[3][2]))
    countdown = disnake.utils.format_dt(time,style='R')
    embed = disnake.Embed(title="–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–∞—Ö: " + MapInPubs[0], color=0x0091ff)
    embed.set_image(url = MapInPubs[1])
    embed.add_field(name="–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞: " + MapInPubs[2], value="", inline = False)
    embed.add_field(name="–°–º–µ–Ω–∏—Ç—Å—è: " + countdown, value="", inline=False)
    await inter.response.send_message(embed=embed, content = "")

@bot.slash_command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—ã –≤ —Ä–∞–Ω–∫–µ–¥–µ")
async def map_in_ranked(inter):
    #Zdyn = await inter.response.send_message("https://tenor.com/view/wait-star-wars-watching-looking-staring-gif-10097895")
    MapInRanked = GenRankedMap()
    time = datetime.datetime.now() + datetime.timedelta(hours=int(MapInRanked[3][0]), minutes=int(MapInRanked[3][1]), seconds=int(MapInRanked[3][2]))
    countdown = disnake.utils.format_dt(time,style='R')
    embed = disnake.Embed(title="–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä–∞–Ω–∫–µ–¥–µ: " + MapInRanked[0], color=0x0091ff)
    embed.set_image(url=MapInRanked[1])
    embed.add_field(name="–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞: " + MapInRanked[2], value="", inline = False)
    embed.add_field(name="–°–º–µ–Ω–∏—Ç—Å—è: " + countdown, value="", inline=False)
    await inter.response.send_message(embed=embed, content = "")

@bot.slash_command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—ã –≤ —Ä–µ–∂–∏–º–∞—Ö")
async def map_in_ltm(inter):
    #Zdyn = await inter.response.send_message("https://tenor.com/view/wait-star-wars-watching-looking-staring-gif-10097895")
    MapInLTM = GenltmMap()
    time = datetime.datetime.now() + datetime.timedelta(hours=int(MapInLTM[5][0]), minutes=int(MapInLTM[5][1]), seconds=int(MapInLTM[5][2]))
    countdown = disnake.utils.format_dt(time,style='R')
    embed = disnake.Embed(title="–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: " + MapInLTM[0], color=0x0091ff)
    embed.set_image(url=MapInLTM[1])
    embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: " + MapInLTM[2], value="", inline = False)
    embed.add_field(name="–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞: " + MapInLTM[3], value="", inline = False)
    embed.add_field(name="–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–∂–∏–º: " + MapInLTM[4], value="", inline = False)
    embed.add_field(name="–°–º–µ–Ω–∏—Ç—Å—è: " + countdown, value="", inline=False)
    await inter.response.send_message(embed=embed, content = "")

@bot.slash_command(description="–†–æ—Ç–∞—Ü–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ç–æ—Ä–∞")
async def replicator(inter: disnake.ApplicationCommandInteraction):
    ArrayReplicators = GenReplic()
    embed = disnake.Embed(title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–µ–∫—É—â–∏–π: ", color=0x0091ff)
    embed.set_image(file=disnake.File(ArrayReplicators[0]))
    embed1 = disnake.Embed(title="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π: ", color=0x0091ff)
    embed1.set_image(file=disnake.File(ArrayReplicators[1]))
    await inter.response.send_message(embeds=[embed, embed1])

@bot.slash_command(description="–ú–∞–≥–∞–∑–∏–Ω")
async def shop(inter: disnake.ApplicationCommandInteraction):
    ArrayShop = GenShop()
    AllEmbeds = []

    for i in ArrayShop:
        print(AllEmbeds)
        embed = disnake.Embed(title=i[0], color=0x0091ff)
        if len(i[1]) == 2:
            embed.add_field(name="–¶–µ–Ω–∞: " + str(i[1][0]) + " LT", value="", inline=False)
            embed.add_field(name="–¶–µ–Ω–∞: " + str(i[1][1])+ " AC", value="", inline=False)
        else:
            embed.add_field(name="–¶–µ–Ω–∞: " + str(i[1][0])+ " AC", value="", inline=False)
        # embed.add_field(name="–¶–µ–Ω–∞: " + str(i[1]), value="", inline=False)
        embed.set_image(url=i[2])
        AllEmbeds.append(embed)
        print(i[2])
    paginator = disnake_paginator.ButtonPaginator(title="shop", color=0x0091ff, segments=AllEmbeds, button_style=disnake.ButtonStyle.blurple)
    await paginator.start(inter, ephemeral=True) #sends a message in the channel
	
@bot.slash_command(description="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def create_party(inter: disnake.ApplicationCommandInteraction, players_count: commands.Range[int, 2, 3], your_rank_or_mode: disnake.Role, description_party: str):
    global PartyCreator
    
    await inter.channel.send(your_rank_or_mode.mention,delete_after=3600)
    PartyIsCreate = CreateParty(inter, players_count, your_rank_or_mode, description_party)
    mess = await inter.channel.send(embed=PartyIsCreate[0], components=PartyIsCreate[1])
    
    PartyCreator[mess.id] = inter.author
    await inter.response.send_message("–°–µ–∫—É–Ω–¥–æ—á–∫—É", delete_after=0)

@bot.slash_command(description="–°–ª—É—á–∞–π–Ω—ã–π –≥–µ—Ä–æ–π –∏ –≥–∞–Ω—ã")
async def rand_leg_and_gun(inter: disnake.ApplicationCommandInteraction):
    ArrayGun = rand_gun()
    
        
    embed1gun = disnake.Embed(title="–ü–µ—Ä–≤—ã–π –≥–∞–Ω: " + ArrayGun[0], color=0x0091ff)
    embed1gun.set_image(url=ArrayGun[1])
    embed2gun = disnake.Embed(title="–í—Ç–æ—Ä–æ–π –≥–∞–Ω: " + ArrayGun[2], color=0x0091ff)
    embed2gun.set_image(url=ArrayGun[3])
    embed3gun = disnake.Embed(title="–¢—Ä–µ—Ç–∏–π –≥–∞–Ω(–ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ –Ω–∞ –ë–∞–ª–ª–∏—Å—Ç–∏–∫–µ): " + ArrayGun[4], color=0x0091ff)
    embed3gun.set_image(url=ArrayGun[5])
    if type(ArrayGun[6]) == str:
        embed3gun.set_footer(text = ArrayGun[6])
    ArrayLeg = rand_leg()
    embed1leg = disnake.Embed(title="–ü–µ—Ä–≤—ã–π –≥–µ—Ä–æ–π: " + ArrayLeg[0], color=0x0091ff)
    embed1leg.set_image(url=ArrayLeg[1])
    embed2leg = disnake.Embed(title="–í—Ç–æ—Ä–æ–π –≥–µ—Ä–æ–π: " + ArrayLeg[2], color=0x0091ff)
    embed2leg.set_image(url=ArrayLeg[3])
    embed3leg = disnake.Embed(title="–¢—Ä–µ—Ç–∏–π –≥–µ—Ä–æ–π(–ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±—Ä–∞–Ω—ã): " + ArrayLeg[4], color=0x0091ff)
    embed3leg.set_image(url=ArrayLeg[5])
    await inter.response.send_message(embeds=[embed1leg, embed2leg, embed3leg, embed1gun, embed2gun, embed3gun], ephemeral=True)
                
# @bot.slash_command(description="test")
# async def test(inter: disnake.ApplicationCommandInteraction):
#     global PartyCreator
#     PartyIsCreate = CreateParty(inter, 3, "platinum", "description_party")
#     await inter.response.send_message("tewt", delete_after= 0)
#     mess = await inter.channel.send(embed=PartyIsCreate[0], components=PartyIsCreate[1])
#     PartyCreator[mess.id] = inter.author
#     await inter.response.send_message("–°–µ–∫—É–Ω–¥–æ—á–∫—É", delete_after=0)
    
           
bot.run(os.getenv('TOKEN'))
